# Cypress E2E Test Workflow
# Runs E2E tests on pull requests and pushes to main branch
# Following Cypress.io best practices for CI/CD integration

name: Cypress E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  # Allow manual trigger
  workflow_dispatch:

env:
  NODE_VERSION: '20'  # * Updated to match package.json engine requirement
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
  # ! CRITICAL: Cypress best practice - always set baseUrl via env var as backup
  CYPRESS_BASE_URL: 'http://localhost:3002'

jobs:
  # Job to install dependencies and build the app
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      # ! Skip build for E2E tests - we'll use dev server (faster)
      # * Building is only needed for production deployment
      # - name: Build application
      #   run: npm run build:web

      # ! Not needed when using dev server
      # - name: Save build folder
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: build-folder
      #     path: build
      #     if-no-files-found: error

  # Cypress E2E tests running in parallel
  cypress-run:
    runs-on: ubuntu-latest
    needs: install
    strategy:
      # Run tests in parallel
      fail-fast: false
      matrix:
        # Run 4 copies of the job in parallel
        containers: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      # ! Not needed when using dev server
      # - name: Download build folder
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: build-folder
      #     path: build

      - name: Install dependencies
        run: npm ci

      - name: Verify Cypress
        run: npx cypress verify

      # ! CRITICAL: Following Cypress.io best practice - Start server BEFORE Cypress
      # * Using start-server-and-test for reliable server management
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          # ! Don't install again - we already did npm ci
          install: false
          # * Use start-server-and-test to properly manage server lifecycle
          start: npm run web
          wait-on: 'http://localhost:3002'
          wait-on-timeout: 120
          browser: chrome
          record: true
          parallel: true
          group: 'E2E Tests'
          # Pass GitHub token to allow status checks
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Tag recordings
          tag: ${{ github.event_name }}
          # * Ensure clean test environment
          command-prefix: 'npm run pre-test:cleanup &&'
        env:
          # Pass Cypress Cloud record key as secret
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Pass GitHub token to allow accurately detecting a build vs a re-run
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Unique build id for Cypress Cloud
          CYPRESS_CI_BUILD_ID: ${{ github.repository }}-${{ github.run_id }}-${{ github.run_attempt }}
          # Environment variables for the app
          NODE_ENV: test
          REACT_APP_API_URL: ${{ secrets.TEST_API_URL }}

      # Upload screenshots on failure
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.containers }}
          path: cypress/screenshots
          if-no-files-found: ignore

      # Upload videos
      - name: Upload videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos-${{ matrix.containers }}
          path: cypress/videos
          if-no-files-found: ignore

  # Job to generate test report
  test-report:
    runs-on: ubuntu-latest
    needs: cypress-run
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: cypress-artifacts

      - name: Merge test results
        run: |
          mkdir -p test-results
          find cypress-artifacts -name "*.xml" -exec cp {} test-results/ \;

      - name: Generate HTML report
        run: |
          npm install -g mochawesome mochawesome-merge mochawesome-report-generator
          mochawesome-merge cypress-artifacts/**/*.json > test-results/combined.json
          marge test-results/combined.json -o test-results/html-report
        continue-on-error: true

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-results/html-report
          if-no-files-found: ignore

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const testResults = 'Test results summary...'; // Parse from test files

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üß™ Cypress E2E Test Results\n\n${testResults}`
            });

  # Send notifications on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: cypress-run
    if: failure()
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå Cypress E2E tests failed on ${{ github.ref }} by ${{ github.actor }}"}' \
            $SLACK_WEBHOOK_URL

      - name: Create GitHub issue for failure
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `E2E Tests Failed on Main Branch - ${new Date().toISOString()}`;
            const body = `
              ## E2E Test Failure

              **Branch:** main
              **Commit:** ${{ github.sha }}
              **Author:** ${{ github.actor }}
              **Workflow:** ${{ github.workflow }}
              **Run:** ${{ github.run_id }}

              [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'e2e-test-failure', 'priority-high']
            });