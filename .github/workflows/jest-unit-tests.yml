# Jest Unit Test Workflow
# Runs unit tests with Jest and React Native Testing Library
# Generates coverage reports and enforces coverage thresholds

name: Jest Unit Tests

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: false

      - name: Run TypeScript check
        run: npx tsc --noEmit
        continue-on-error: false

      - name: Run Jest tests with coverage
        run: npm run test:coverage -- --ci --maxWorkers=2
        env:
          NODE_ENV: test
          CI: true

      - name: Generate coverage report
        run: |
          mkdir -p coverage-report
          cp -r coverage/* coverage-report/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: jest-coverage
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report
          if-no-files-found: ignore

      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          COVERAGE_SUMMARY=$(cat coverage/coverage-summary.json)

          # Extract coverage percentages
          LINES=$(echo $COVERAGE_SUMMARY | jq '.total.lines.pct')
          BRANCHES=$(echo $COVERAGE_SUMMARY | jq '.total.branches.pct')
          FUNCTIONS=$(echo $COVERAGE_SUMMARY | jq '.total.functions.pct')
          STATEMENTS=$(echo $COVERAGE_SUMMARY | jq '.total.statements.pct')

          echo "Coverage Results:"
          echo "Lines: ${LINES}% (threshold: 80%)"
          echo "Branches: ${BRANCHES}% (threshold: 75%)"
          echo "Functions: ${FUNCTIONS}% (threshold: 80%)"
          echo "Statements: ${STATEMENTS}% (threshold: 80%)"

          # Check thresholds
          if (( $(echo "$LINES < 80" | bc -l) )); then
            echo "‚ùå Line coverage below threshold"
            exit 1
          fi

          if (( $(echo "$BRANCHES < 75" | bc -l) )); then
            echo "‚ùå Branch coverage below threshold"
            exit 1
          fi

          if (( $(echo "$FUNCTIONS < 80" | bc -l) )); then
            echo "‚ùå Function coverage below threshold"
            exit 1
          fi

          echo "‚úÖ All coverage thresholds met"

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));

            const coverageReport = `
            ## üìä Test Coverage Report

            | Type | Coverage | Threshold | Status |
            |------|----------|-----------|--------|
            | Lines | ${coverage.total.lines.pct}% | 80% | ${coverage.total.lines.pct >= 80 ? '‚úÖ' : '‚ùå'} |
            | Branches | ${coverage.total.branches.pct}% | 75% | ${coverage.total.branches.pct >= 75 ? '‚úÖ' : '‚ùå'} |
            | Functions | ${coverage.total.functions.pct}% | 80% | ${coverage.total.functions.pct >= 80 ? '‚úÖ' : '‚ùå'} |
            | Statements | ${coverage.total.statements.pct}% | 80% | ${coverage.total.statements.pct >= 80 ? '‚úÖ' : '‚ùå'} |

            **Total Coverage:** ${coverage.total.lines.pct}%
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jest-test-results
          path: |
            coverage/
            test-results/
          if-no-files-found: ignore

  # Job to run platform-specific tests
  platform-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16, 18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run platform-specific tests
        run: npm test -- --testPathPattern="platform"
        env:
          NODE_ENV: test
          CI: true
          TEST_PLATFORM: ${{ matrix.os }}

  # Send notifications on failure
  notify-test-failure:
    runs-on: ubuntu-latest
    needs: [unit-tests, platform-tests]
    if: failure()
    steps:
      - name: Send notification
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Unit tests failed on main branch"
          # Add Slack/email notification here